"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_Language = require("../Text.Parsing.Parser.Language/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token/index.js");
var Proportion = (function () {
    function Proportion(value0) {
        this.value0 = value0;
    };
    Proportion.create = function (value0) {
        return new Proportion(value0);
    };
    return Proportion;
})();
var BPM = (function () {
    function BPM(value0) {
        this.value0 = value0;
    };
    BPM.create = function (value0) {
        return new BPM(value0);
    };
    return BPM;
})();
var CPS = (function () {
    function CPS(value0) {
        this.value0 = value0;
    };
    CPS.create = function (value0) {
        return new CPS(value0);
    };
    return CPS;
})();
var Passage = (function () {
    function Passage() {

    };
    Passage.value = new Passage();
    return Passage;
})();
var Origin = (function () {
    function Origin() {

    };
    Origin.value = new Origin();
    return Origin;
})();
var Eval = (function () {
    function Eval() {

    };
    Eval.value = new Eval();
    return Eval;
})();

//  show (Metric x y) = "metric"
// converge needs two points of contact the self and above, so Tuplet Self Above
var Diverge = (function () {
    function Diverge() {

    };
    Diverge.value = new Diverge();
    return Diverge;
})();

//  show (Metric x y) = "metric"
// converge needs two points of contact the self and above, so Tuplet Self Above
var ConvergeFromOrigin = (function () {
    function ConvergeFromOrigin(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ConvergeFromOrigin.create = function (value0) {
        return function (value1) {
            return new ConvergeFromOrigin(value0, value1);
        };
    };
    return ConvergeFromOrigin;
})();

//  show (Metric x y) = "metric"
// converge needs two points of contact the self and above, so Tuplet Self Above
var ConvergeFromEval = (function () {
    function ConvergeFromEval(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ConvergeFromEval.create = function (value0) {
        return function (value1) {
            return new ConvergeFromEval(value0, value1);
        };
    };
    return ConvergeFromEval;
})();
var Polytemporal = (function () {
    function Polytemporal(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Polytemporal.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Polytemporal(value0, value1, value2);
            };
        };
    };
    return Polytemporal;
})();

// bpm (120,1/4) cps [2,1,3,2.2]
// ratios/bpms/[cps] -- converge Double// eval// origin -- quant
// canonise (ratios [1,2,3,4]) $ origin $ converge 20 
// este programa tiene 4 voces todas contando desde un origen comun (que es cuando la proporcion 1 esta en el instante 0) y convergen (o pudieron haber convergido) en el evento 20
// "xxox oxx[xx] ox(3,8) !x#4" $ dur (reciprocal [2,4,8,8])//(len 12)//(len [12,6,3,1.5])//structure 12 (reciprocal [2,4,8,8]) $ inf/fin $ cp 25
// onset notation: -- dur substitutes onset notation if no onset given
// xo ---- recursive!! -- repeat notation
// euclidean
// if no dur or len given, it is one beat of the tempo, or one whole cycle
// structure recieves a length (12 beats of the tempo unit or 12 cycles) and a subdivision
// chord [0,4,7] (seq "xoo")
// arpeggio [0,4,7] 0.25 (seq' "xooo")
// razgado [0,4,7] (0.05,(-0.1)) (bjork "xooxoxo")
// heterophony [0,4,7] [0,1,1] ("ooxoooxo")
// event (func blabla) "xooxo"
// atIndex 4 (func blabla)
// atIndexMod 4 (func blabla) "xoooxoo"
// funcs: note, speed, vowel, lpf, hpf, begin, end, crush, 
// up here tengo q separar el canonic y el [passage] 
// aki va Program Canonic (Array Passage)
var Program = (function () {
    function Program(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Program.create = function (value0) {
        return function (value1) {
            return new Program(value0, value1);
        };
    };
    return Program;
})();
var voicingShowInstance = {
    show: function (v) {
        if (v instanceof Proportion) {
            return Data_Show.show(Data_Show.showNumber)(v.value0);
        };
        if (v instanceof BPM) {
            return Data_Show.show(Data_Tuple.showTuple(Data_Show.showNumber)(Data_Show.showNumber))(v.value0);
        };
        if (v instanceof CPS) {
            return Data_Show.show(Data_Show.showNumber)(v.value0);
        };
        throw new Error("Failed pattern match at Main (line 87, column 1 - line 90, column 24): " + [ v.constructor.name ]);
    }
};

// toRat:: (Either Int Number) -> Rational
// toRat (Left x) = fromInt x
// toRat (Right x) = Ratio x
// GenLanguageDef :: Type -> (Type -> Type) -> Type
// LanguageDef { caseSensitive :: Boolean, commentEnd :: String, commentLine :: String, commentStart :: String, identLetter :: ParserT s m Char, identStart :: ParserT s m Char, nestedComments :: Boolean, opLetter :: ParserT s m Char, opStart :: ParserT s m Char, reservedNames :: Array String, reservedOpNames :: Array String }
var tokenParser = Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)(Text_Parsing_Parser_Language.haskellStyle);
var whitespace = tokenParser.whiteSpace;
var semi = tokenParser.semi;
var reserved = tokenParser.reserved;
var passageShowInstance = {
    show: function (v) {
        return "passage";
    }
};
var parseOrigin = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("origin"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("o")))(function () {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Origin.value);
});
var parseEval = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("eval"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("e")))(function () {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Eval.value);
});
var parseDiv = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("diverge"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("d")))(function () {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Diverge.value);
});
var parens = tokenParser.parens;
var noseShowInstance = {
    show: function (v) {
        if (v instanceof Origin) {
            return "origin";
        };
        if (v instanceof Eval) {
            return "eval";
        };
        throw new Error("Failed pattern match at Main (line 94, column 1 - line 96, column 21): " + [ v.constructor.name ]);
    }
};
var nfToNum = function (v) {
    if (v instanceof Data_Either.Left) {
        return Data_Int.toNumber(v.value0);
    };
    if (v instanceof Data_Either.Right) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Main (line 272, column 1 - line 272, column 40): " + [ v.constructor.name ]);
};
var naturalOrFloat = tokenParser.naturalOrFloat;
var parseCPSMark = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(nfToNum(x));
});
var parseConvE = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("convergeFromEval"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("c-e")))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (y) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ConvergeFromEval(nfToNum(x), nfToNum(y)));
            });
        });
    });
});
var parseConvO = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("convergeFromOrigin"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("c-o")))(function () {
    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (y) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ConvergeFromOrigin(nfToNum(x), nfToNum(y)));
            });
        });
    });
});
var parseSingleCPS = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("cycle"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("cps")))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("c")))(function () {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new CPS(nfToNum(x)));
    });
});
var parseSingleProp = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("proportion"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("prop")))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("p")))(function () {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Proportion(nfToNum(x)));
    });
});
var parseSingleTempo = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (y) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("tempo"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("bpm")))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("t")))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(BPM.create(new Data_Tuple.Tuple(nfToNum(x), nfToNum(y))));
        });
    });
});
var parseTempoMark = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (x) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(naturalOrFloat)(function (y) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(nfToNum(x), nfToNum(y)));
    });
});
var integer = tokenParser.integer;
var identifier = tokenParser.identifier;
var $$float = tokenParser["float"];

//---
// passage :: P Program
// passage = do
//   x <- string "passage"
//   pure Passage
var discardA = function (dictMonad) {
    return function (m) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                return k;
            });
        };
    };
};
var defaultTempo = new Data_Tuple.Tuple(120.0, 0.25);
var parseDefTempo = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("global"))(function (x) {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(defaultTempo);
});
var defaultCPS = 0.5;
var parseDefCPS = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("global"))(function (x) {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(defaultCPS);
});
var convergeShowInstance = {
    show: function (v) {
        if (v instanceof Diverge) {
            return "diverge";
        };
        if (v instanceof ConvergeFromOrigin) {
            return "convergeOrigin" + (Data_Show.show(Data_Show.showNumber)(v.value0) + (" " + Data_Show.show(Data_Show.showNumber)(v.value1)));
        };
        if (v instanceof ConvergeFromEval) {
            return "convergeEval" + (Data_Show.show(Data_Show.showNumber)(v.value0) + (" " + Data_Show.show(Data_Show.showNumber)(v.value1)));
        };
        throw new Error("Failed pattern match at Main (line 102, column 1 - line 105, column 76): " + [ v.constructor.name ]);
    }
};
var polytemporalShowInstance = {
    show: function (v) {
        return "poly " + (Data_Show.show(Data_List_Types.showList(voicingShowInstance))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(noseShowInstance))(v.value1) + (" " + Data_Show.show(Data_List_Types.showList(convergeShowInstance))(v.value2)))));
    }
};
var programShowInstance = {
    show: function (v) {
        return "poly " + (Data_Show.show(polytemporalShowInstance)(v.value0) + (" " + ("pass " + Data_Show.show(Data_List_Types.showList(passageShowInstance))(v.value1))));
    }
};
var comma = tokenParser.comma;
var parseByVoice = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseSingleProp), Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseSingleCPS), Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseSingleTempo) ]))(comma))(function (x) {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
});

//-- Converge parser
var parseConverge = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ parseDiv, parseConvO, parseConvE ]))(comma))(function (x) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
    });
});

//--- Head Parser
var parseNose = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ parseOrigin, parseEval ]))(comma))(function (x) {
    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
});
var parsebpms = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("tempi"))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("tempos")))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("bpms")))(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parens(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ parseTempoMark, parseDefTempo ]))(comma)))(function (x) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Functor.map(Data_List_Types.functorList)(BPM.create)(x));
        });
    });
});
var parsecpss = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("cycles"))(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parens(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ parseCPSMark, parseDefCPS ]))(comma)))(function (x) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Functor.map(Data_List_Types.functorList)(CPS.create)(x));
    });
});
var parseproportions = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("proportions"))(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parens(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(naturalOrFloat)(comma)))(function (x) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Functor.map(Data_List_Types.functorList)(function (x$prime) {
            return new Proportion(nfToNum(x$prime));
        })(x));
    });
});

// parseMetric:: P Nose 
// parseMetric = do
//   _ <- string "metric" <|> string "m"
//   whitespace
//   x <- naturalOrFloat
//   whitespace
//   y <- naturalOrFloat
//   pure $ Metric (nfToNum x) (nfToNum y)
//--- voicing parser
var parsevoicings = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ parens(parseByVoice), Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parsebpms), Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseproportions), Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parsecpss) ]))(function (x) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
    });
});
var colon = tokenParser.colon;
var canonise = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Data_Identity.monadIdentity)("canonise "))(function () {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parsevoicings)(function (x) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parens(parseNose))(function (y) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whitespace)(function () {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parens(parseConverge))(function (z) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Polytemporal(x, y, z));
                            });
                        });
                    });
                });
            });
        });
    });
});
var polytemporal = Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ canonise ]);
var brackets = tokenParser.brackets;
var braces = tokenParser.braces;
module.exports = {
    Program: Program,
    Passage: Passage,
    Polytemporal: Polytemporal,
    Proportion: Proportion,
    BPM: BPM,
    CPS: CPS,
    Origin: Origin,
    Eval: Eval,
    Diverge: Diverge,
    ConvergeFromOrigin: ConvergeFromOrigin,
    ConvergeFromEval: ConvergeFromEval,
    polytemporal: polytemporal,
    canonise: canonise,
    parseConverge: parseConverge,
    parseDiv: parseDiv,
    parseConvO: parseConvO,
    parseConvE: parseConvE,
    parseNose: parseNose,
    parseOrigin: parseOrigin,
    parseEval: parseEval,
    parsevoicings: parsevoicings,
    parseByVoice: parseByVoice,
    parseSingleProp: parseSingleProp,
    parseSingleTempo: parseSingleTempo,
    parseSingleCPS: parseSingleCPS,
    parseproportions: parseproportions,
    parsebpms: parsebpms,
    parseDefTempo: parseDefTempo,
    parseTempoMark: parseTempoMark,
    defaultTempo: defaultTempo,
    parsecpss: parsecpss,
    parseDefCPS: parseDefCPS,
    defaultCPS: defaultCPS,
    parseCPSMark: parseCPSMark,
    discardA: discardA,
    nfToNum: nfToNum,
    tokenParser: tokenParser,
    parens: parens,
    braces: braces,
    identifier: identifier,
    reserved: reserved,
    naturalOrFloat: naturalOrFloat,
    "float": $$float,
    whitespace: whitespace,
    colon: colon,
    brackets: brackets,
    comma: comma,
    semi: semi,
    integer: integer,
    programShowInstance: programShowInstance,
    passageShowInstance: passageShowInstance,
    polytemporalShowInstance: polytemporalShowInstance,
    voicingShowInstance: voicingShowInstance,
    noseShowInstance: noseShowInstance,
    convergeShowInstance: convergeShowInstance
};
