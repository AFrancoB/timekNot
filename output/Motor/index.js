// Generated by purs version 0.15.2
import * as AST from "../AST/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Date from "../Data.Date/index.js";
import * as Data_Date_Component from "../Data.Date.Component/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_List_Lazy from "../Data.List.Lazy/index.js";
import * as Data_List_Lazy_Types from "../Data.List.Lazy.Types/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Data_Time from "../Data.Time/index.js";
import * as Data_Time_Component from "../Data.Time.Component/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var toL = function (dictFoldable) {
    return function (x) {
        return Data_List_Lazy.fromFoldable(dictFoldable)(x);
    };
};
var toEvent = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just({
            whenPosix: v.value0.value0,
            s: v.value0.value1,
            n: 0
        });
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Motor (line 61, column 1 - line 61, column 53): " + [ v.constructor.name ]);
};
var sampleWithIndex = function (v) {
    if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.Sample) {
        var au = Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value0.value0);
        return Data_List_Lazy.zip(au)(Data_List_Lazy.range(0)(Data_List_Lazy.length(au)));
    };
    return Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([  ]);
};
var oDur = /* #__PURE__ */ Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
var o = /* #__PURE__ */ Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([ 0.0, 0.2, 0.5 ]);
var makeTime = function (h) {
    return function (min) {
        return function (sec) {
            return function (milisec) {
                return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(h)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(min)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(sec)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(milisec)));
            };
        };
    };
};
var makeDate = function (y) {
    return function (m) {
        return function (d) {
            return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.flap(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.canonicalDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(y)))(m))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(d)));
        };
    };
};
var t = /* #__PURE__ */ (function () {
    return {
        freq: Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(2)(1),
        time: new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25)(100)),
        count: Data_Rational.fromInt(0)
    };
})();
var we = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var ws = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var lenRhyth = function (v) {
    if (v instanceof AST.Onsets) {
        return Data_List_Lazy.length(Data_List_Lazy.filter(function (x1) {
            return x1 === true;
        })(Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value0)));
    };
    return 0;
};
var isSample = function (v) {
    if (v instanceof AST.Sample) {
        return true;
    };
    return false;
};
var isN = function (v) {
    if (v instanceof AST.N) {
        return true;
    };
    return false;
};
var iToN = function (x) {
    return Data_Int.toNumber(x);
};
var multiplePatternW = function (indexAtPhrase) {
    return function (mo) {
        return function (first) {
            return function (o1) {
                return function (last$prime) {
                    var o$prime = Data_List_Lazy.concat(Data_List_Lazy.replicate(mo - 1 | 0)(o1));
                    var lenO = Data_List_Lazy.length(o1);
                    var middle = Data_Functor.map(Data_List_Lazy_Types.functorList)(function (x) {
                        return Data_Tuple.fst(x) + Data_Tuple.snd(x);
                    })(Data_List_Lazy.zip(o$prime)(Data_Functor.map(Data_List_Lazy_Types.functorList)(iToN)(Data_List_Lazy.concat(toL(Data_List_Lazy_Types.foldableList)(Data_Functor.map(Data_List_Lazy_Types.functorList)(function (x) {
                        return Data_List_Lazy.replicate(lenO)(x);
                    })(toL(Data_List_Lazy_Types.foldableList)(Data_List_Lazy.range(1)(mo - 1 | 0))))))));
                    var last = (function () {
                        var $39 = Data_Eq.eq(Data_List_Lazy_Types.eqList(Data_Eq.eqNumber))(last$prime)(toL(Data_Foldable.foldableArray)([  ]));
                        if ($39) {
                            return toL(Data_Foldable.foldableArray)([  ]);
                        };
                        return Data_Functor.map(Data_List_Lazy_Types.functorList)(function (v) {
                            return v + iToN(mo);
                        })(last$prime);
                    })();
                    return Data_Functor.map(Data_List_Lazy_Types.functorList)(function (v) {
                        return v + iToN(indexAtPhrase);
                    })(Data_List_Lazy.concat(toL(Data_Foldable.foldableArray)([ first, middle, last ])));
                };
            };
        };
    };
};
var twoPatternW = function (indexPhrase) {
    return function (first) {
        return function (last$prime) {
            var last = (function () {
                var $40 = Data_Eq.eq(Data_List_Lazy_Types.eqList(Data_Eq.eqNumber))(last$prime)(toL(Data_Foldable.foldableArray)([  ]));
                if ($40) {
                    return toL(Data_Foldable.foldableArray)([  ]);
                };
                return Data_Functor.map(Data_List_Lazy_Types.functorList)(function (v) {
                    return v + 1.0;
                })(toL(Data_List_Lazy_Types.foldableList)(last$prime));
            })();
            return Data_Functor.map(Data_List_Lazy_Types.functorList)(function (v) {
                return v + iToN(indexPhrase);
            })(Data_List_Lazy.concat(toL(Data_Foldable.foldableArray)([ first, last ])));
        };
    };
};
var getIndexSimple = function (start) {
    return function (end) {
        return function (o1) {
            var between = Data_List_Lazy.filter(function (x) {
                return x > start && end >= x;
            })(o1);
            var before = Data_List_Lazy.length(Data_List_Lazy.filter(function (x) {
                return x < start;
            })(o1)) - 1 | 0;
            var $41 = before === 0;
            if ($41) {
                return Data_List_Lazy.range(0)(Data_List_Lazy.length(between) - 1 | 0);
            };
            return Data_List_Lazy.range(before)(Data_List_Lazy.length(between) - 1 | 0);
        };
    };
};
var getIndexOfMiddleList = function (middleLen) {
    return function (o1) {
        var x = toL(Data_List_Lazy_Types.foldableList)(Data_List_Lazy.range(0)(Data_List_Lazy.length(o1) - 1 | 0));
        return Data_List_Lazy.take(middleLen)(Data_List_Lazy.cycle(x));
    };
};
var getIndexOfLastList = function (x) {
    return function (o1) {
        if (Data_Eq.eq(Data_List_Lazy_Types.eqList(Data_Eq.eqNumber))(x)(toL(Data_Foldable.foldableArray)([  ]))) {
            return toL(Data_Foldable.foldableArray)([  ]);
        };
        if (Data_Boolean.otherwise) {
            return Data_List_Lazy.range(0)(Data_List_Lazy.length(x) - 1 | 0);
        };
        throw new Error("Failed pattern match at Motor (line 195, column 1 - line 195, column 60): " + [ x.constructor.name, o1.constructor.name ]);
    };
};
var getIndexOfFirstList = function (x) {
    return function (o1) {
        if (Data_Eq.eq(Data_List_Lazy_Types.eqList(Data_Eq.eqNumber))(x)(toL(Data_Foldable.foldableArray)([  ]))) {
            return toL(Data_Foldable.foldableArray)([  ]);
        };
        if (Data_Boolean.otherwise) {
            return Data_List_Lazy.range(Data_List_Lazy.length(o1) - Data_List_Lazy.length(x) | 0)(Data_List_Lazy.length(o1) - 1 | 0);
        };
        throw new Error("Failed pattern match at Motor (line 186, column 1 - line 186, column 61): " + [ x.constructor.name, o1.constructor.name ]);
    };
};
var getEventIndex = function (p$prime) {
    return function (len$prime) {
        return function (e$prime) {
            var p = Data_Int.toNumber(p$prime);
            var len = Data_Int.toNumber(len$prime);
            var e = Data_Int.toNumber(e$prime);
            return Data_Int.round(p * len + e);
        };
    };
};
var fromPatternToList = function (v) {
    if (v instanceof AST.Onsets) {
        return Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value0);
    };
    return Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([ false ]);
};
var fromRhythmicToList = function (v) {
    if (v instanceof AST.Onsets) {
        return Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value0);
    };
    if (v instanceof AST.Patron) {
        return Data_List_Lazy.concat(Data_Functor.map(Data_List_Lazy_Types.functorList)(fromPatternToList)(Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value0)));
    };
    return Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([ false ]);
};
var floor = function (x) {
    return Data_Int.floor(x);
};
var justFractional = function (x) {
    return x - iToN(floor(x));
};
var toRat = function (x) {
    var floored = floor(x);
    var fract = x - iToN(floored);
    var fract$prime = Data_Int.round(fract * iToN(1000000));
    return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(floored)(1))(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(fract$prime)(1000000));
};
var positionToTime = function (t1) {
    return function (lenPasaje) {
        return function (v) {
            var posInTempo = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(toRat(v.value0))(lenPasaje);
            var countInTime = Data_Tempo.countToTime(t1)(posInTempo);
            return new AST.Coord(Data_Newtype.unwrap()(Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime(countInTime))) / 1000.0, floor(v.value0), v.value1);
        };
    };
};
var filterEvents = function (nPassages) {
    return function (start) {
        return function (end) {
            return function (passageAtStart) {
                return function (o1) {
                    if (nPassages === 0) {
                        var x = Data_Functor.map(Data_List_Lazy_Types.functorList)(function (v) {
                            return v + iToN(floor(passageAtStart));
                        })(Data_List_Lazy.filter(function (x1) {
                            return x1 >= start && x1 < end;
                        })(o1));
                        return Data_List_Lazy.zip(x)(getIndexSimple(start)(end)(o1));
                    };
                    if (nPassages === 1) {
                        var lastList = Data_List_Lazy.filter(function (x) {
                            return x >= 0.0 && x < end;
                        })(o1);
                        var indexLast = getIndexOfLastList(lastList)(o1);
                        var firstList = Data_List_Lazy.filter(function (x) {
                            return x >= start && x < 1.0;
                        })(o1);
                        var indexFst = getIndexOfFirstList(firstList)(o1);
                        var listOfIndexes = Data_List_Lazy.concat(toL(Data_Foldable.foldableArray)([ indexFst, indexLast ]));
                        var listOfEvents = twoPatternW(floor(passageAtStart))(firstList)(lastList);
                        return Data_List_Lazy.zip(listOfEvents)(listOfIndexes);
                    };
                    if (Data_Boolean.otherwise) {
                        var middleList = Data_List_Lazy.take(floor(iToN(Data_List_Lazy.length(o1)) * (iToN(nPassages) - 1.0)))(Data_List_Lazy.cycle(o1));
                        var middleIndex = getIndexOfMiddleList(Data_List_Lazy.length(middleList))(o1);
                        var lastList = Data_List_Lazy.filter(function (x) {
                            return x >= 0.0 && x < end;
                        })(o1);
                        var lastIndex = getIndexOfLastList(lastList)(o1);
                        var firstList = Data_List_Lazy.filter(function (x) {
                            return x >= start && x < 1.0;
                        })(o1);
                        var fstIndex = getIndexOfFirstList(firstList)(o1);
                        var listOfIndexes = Data_List_Lazy.concat(toL(Data_Foldable.foldableArray)([ fstIndex, middleIndex, lastIndex ]));
                        var listOfEvents = multiplePatternW(floor(passageAtStart))(nPassages)(firstList)(o1)(lastList);
                        return Data_List_Lazy.zip(listOfEvents)(listOfIndexes);
                    };
                    throw new Error("Failed pattern match at Motor (line 157, column 1 - line 157, column 92): " + [ nPassages.constructor.name, start.constructor.name, end.constructor.name, passageAtStart.constructor.name, o1.constructor.name ]);
                };
            };
        };
    };
};
var evalToCountNumber = function (t1) {
    return function (eval1) {
        return function (tp) {
            var x = Data_Newtype.unwrap()(Data_DateTime.diff(Data_Time_Duration.durationMilliseconds)(tp)(eval1));
            return (x * Data_Rational.toNumber(t1.freq)) / 1000.0;
        };
    };
};
var evalToCountWrapper = function (v) {
    return function (v1) {
        return function (v2) {
            return function (tp) {
                if (v instanceof AST.Origin) {
                    return Data_Tempo.timeToCountNumber(v1)(tp);
                };
                if (v instanceof AST.Eval) {
                    return evalToCountNumber(v1)(v2)(tp);
                };
                if (v instanceof AST.Prospective) {
                    return Data_Tempo.timeToCountNumber(t)(tp);
                };
                throw new Error("Failed pattern match at Motor (line 137, column 1 - line 137, column 76): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, tp.constructor.name ]);
            };
        };
    };
};
var passagePosition = function (o1) {
    return function (lenPasaje) {
        return function (t1) {
            return function (ws1) {
                return function (we1) {
                    return function (eval1) {
                        return function (convergence) {
                            var countAtStart = evalToCountWrapper(convergence)(t1)(eval1)(ws1);
                            var passageAtStart = countAtStart / Data_Rational.toNumber(lenPasaje);
                            var percentAtStart = passageAtStart - iToN(floor(passageAtStart));
                            var countAtEnd = evalToCountWrapper(convergence)(t1)(eval1)(we1);
                            var passageAtEnd = countAtEnd / Data_Rational.toNumber(lenPasaje);
                            var nPassages = floor(passageAtEnd) - floor(passageAtStart) | 0;
                            var percentAtEnd = passageAtEnd - iToN(floor(passageAtEnd));
                            var filtrado = filterEvents(nPassages)(percentAtStart)(percentAtEnd)(passageAtStart)(o1);
                            var posToTime = Data_Functor.map(Data_List_Lazy_Types.functorList)(function (x) {
                                return positionToTime(t1)(lenPasaje)(x);
                            })(filtrado);
                            return Data_Map_Internal.fromFoldableWithIndex(Data_Ord.ordInt)(Data_List_Lazy_Types.foldableWithIndexList)(posToTime);
                        };
                    };
                };
            };
        };
    };
};
var fromPassageToCoord = function (rhy) {
    return function (t1) {
        return function (ws1) {
            return function (we1) {
                return function (eval1) {
                    return function (convergence) {
                        var x = fromRhythmicToList(rhy);
                        var passageLength = Data_Rational.fromInt(Data_List_Lazy.length(x));
                        var onsets = Data_Functor.map(Data_List_Lazy_Types.functorList)(function ($100) {
                            return Data_Rational.fromInt(Data_Tuple.snd($100));
                        })(Data_List_Lazy.filter(function (x1) {
                            return Data_Tuple.fst(x1) === true;
                        })(Data_List_Lazy.zip(x)(Data_List_Lazy.range(0)(Data_List_Lazy.length(x)))));
                        var oPercen = Data_Functor.map(Data_List_Lazy_Types.functorList)(function ($101) {
                            return Data_Rational.toNumber((function (v) {
                                return Data_EuclideanRing.div(Data_Ratio.euclideanRingRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(v)(passageLength);
                            })($101));
                        })(onsets);
                        return passagePosition(oPercen)(passageLength)(t1)(ws1)(we1)(eval1)(convergence);
                    };
                };
            };
        };
    };
};
var $$eval = /* #__PURE__ */ (function () {
    return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(14)(59)(500));
})();
var countToStart = 327;
var auralIndex = function (v) {
    if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.Sample) {
        return v.value0.value1;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.N) {
        return v.value0.value1;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return AST.EventI.value;
    };
    throw new Error("Failed pattern match at Motor (line 65, column 1 - line 65, column 34): " + [ v.constructor.name ]);
};
var attachPosixWithSample = function (x) {
    return function (v) {
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(x, v.value0.value0));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Motor (line 94, column 1 - line 94, column 90): " + [ x.constructor.name, v.constructor.name ]);
    };
};
var eventForSample = function (v) {
    return function (len) {
        return function (samples) {
            return function (v1) {
                if (v instanceof AST.EventI) {
                    return attachPosixWithSample(v1.value0)(Data_List_Lazy.head(Data_List_Lazy.filter(function (s) {
                        return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(getEventIndex(v1.value1)(len)(v1.value2))(Data_List_Lazy.length(samples)) === Data_Tuple.snd(s);
                    })(samples)));
                };
                if (v instanceof AST.PassageI) {
                    return attachPosixWithSample(v1.value0)(Data_List_Lazy.head(Data_List_Lazy.filter(function (s) {
                        return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v1.value1)(len) === Data_Tuple.snd(s);
                    })(samples)));
                };
                if (v instanceof AST.MetreI) {
                    return attachPosixWithSample(v1.value0)(Data_List_Lazy.head(Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([  ])));
                };
                throw new Error("Failed pattern match at Motor (line 82, column 1 - line 82, column 102): " + [ v.constructor.name, len.constructor.name, samples.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var samplesWithPosix = function (index) {
    return function (len) {
        return function (samples) {
            return function (coords) {
                return Data_Functor.map(Data_List_Lazy_Types.functorList)(eventForSample(index)(len)(samples))(coords);
            };
        };
    };
};
var passageToEvents = function (v) {
    return function (t1) {
        return function (ws1) {
            return function (we1) {
                return function (eval1) {
                    var samplesI = auralIndex(Data_List_Lazy.last(Data_List_Lazy.filter(isSample)(Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value1))));
                    var samples = sampleWithIndex(Data_List_Lazy.last(Data_List_Lazy.filter(isSample)(Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(v.value1))));
                    var coords = fromPassageToCoord(v.value0)(t1)(ws1)(we1)(eval1)(v.value2);
                    var lCoord = Data_Functor.map(Data_List_Lazy_Types.functorList)(Data_Tuple.snd)(Data_Map_Internal.toUnfoldable(Data_List_Lazy_Types.unfoldableList)(coords));
                    var s = samplesWithPosix(samplesI)(lenRhyth(v.value0))(samples)(lCoord);
                    return Data_Functor.map(Data_List_Lazy_Types.functorList)(toEvent)(s);
                };
            };
        };
    };
};
export {
    passageToEvents,
    evalToCountWrapper
};
