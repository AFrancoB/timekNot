// Generated by purs version 0.15.4
import * as AST from "../AST/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Date from "../Data.Date/index.js";
import * as Data_Date_Component from "../Data.Date.Component/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Lazy from "../Data.List.Lazy/index.js";
import * as Data_List_Lazy_Types from "../Data.List.Lazy.Types/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Data_Time from "../Data.Time/index.js";
import * as Data_Time_Component from "../Data.Time.Component/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var fromFoldable = /* #__PURE__ */ Data_List_Lazy.fromFoldable(Data_List_Types.foldableList);
var fromFoldable1 = /* #__PURE__ */ Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray);
var reduce = /* #__PURE__ */ Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt);
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var toEnum = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumHour);
var toEnum1 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute);
var toEnum2 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond);
var toEnum3 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond);
var flap = /* #__PURE__ */ Data_Functor.flap(Data_Maybe.functorMaybe);
var toEnum4 = /* #__PURE__ */ Data_Enum.toEnum(Data_Date_Component.boundedEnumYear);
var toEnum5 = /* #__PURE__ */ Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_List_Lazy_Types.functorList);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_List_Lazy_Types.eqList(Data_Eq.eqNumber));
var semiringRatio = /* #__PURE__ */ Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt);
var add1 = /* #__PURE__ */ Data_Semiring.add(semiringRatio);
var mul1 = /* #__PURE__ */ Data_Semiring.mul(semiringRatio);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var diff = /* #__PURE__ */ Data_DateTime.diff(Data_Time_Duration.durationMilliseconds);
var fromFoldableWithIndex = /* #__PURE__ */ Data_Map_Internal.fromFoldableWithIndex(Data_Ord.ordInt)(Data_List_Lazy_Types.foldableWithIndexList);
var div1 = /* #__PURE__ */ Data_EuclideanRing.div(/* #__PURE__ */ Data_Ratio.euclideanRingRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt));
var mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);
var fromFoldable2 = /* #__PURE__ */ Data_List_Lazy.fromFoldable(Data_List_Lazy_Types.foldableList);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_List_Lazy_Types.unfoldableList);
var fromFoldable3 = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var toL = function (dictFoldable) {
    var fromFoldable4 = Data_List_Lazy.fromFoldable(dictFoldable);
    return function (x) {
        return fromFoldable4(x);
    };
};
var toL1 = /* #__PURE__ */ toL(Data_List_Lazy_Types.foldableList);
var toL2 = /* #__PURE__ */ toL(Data_Foldable.foldableArray);
var toEvent = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just({
            whenPosix: v.value0.value0,
            s: v.value0.value1,
            n: 0
        });
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Motor (line 92, column 1 - line 92, column 53): " + [ v.constructor.name ]);
};
var sampleWithIndex = function (v) {
    if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.Sample) {
        var au = fromFoldable(v.value0.value0);
        return Data_List_Lazy.zip(au)(Data_List_Lazy.range(0)(Data_List_Lazy.length(au)));
    };
    return fromFoldable1([  ]);
};
var oDur = /* #__PURE__ */ reduce(1)(2);
var o = /* #__PURE__ */ fromFoldable1([ 0.0, 0.2, 0.5 ]);
var nonRepeat$prime = function (v) {
    if (v.value1 === 0) {
        return true;
    };
    return false;
};
var nonRepeat = function (v) {
    return function (x) {
        if (!v) {
            return Data_List_Lazy.filter(nonRepeat$prime)(x);
        };
        if (v) {
            return x;
        };
        throw new Error("Failed pattern match at Motor (line 80, column 1 - line 80, column 58): " + [ v.constructor.name, x.constructor.name ]);
    };
};
var makeTime = function (h) {
    return function (min) {
        return function (sec) {
            return function (milisec) {
                return fromJust(apply(apply(apply(map(Data_Time.Time.create)(toEnum(h)))(toEnum1(min)))(toEnum2(sec)))(toEnum3(milisec)));
            };
        };
    };
};
var makeDate = function (y) {
    return function (m) {
        return function (d) {
            return fromJust(apply(flap(map(Data_Date.canonicalDate)(toEnum4(y)))(m))(toEnum5(d)));
        };
    };
};
var t = /* #__PURE__ */ (function () {
    return {
        freq: reduce(2)(1),
        time: new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25)(100)),
        count: Data_Rational.fromInt(0)
    };
})();
var tAncient = /* #__PURE__ */ (function () {
    return {
        freq: reduce(2)(1),
        time: new Data_DateTime.DateTime(makeDate(2012)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25)(100)),
        count: Data_Rational.fromInt(0)
    };
})();
var we = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var ws = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var lenRhyth = function (v) {
    if (v instanceof AST.Onsets) {
        return Data_List_Lazy.length(Data_List_Lazy.filter(function (x1) {
            return x1 === true;
        })(fromFoldable(v.value0)));
    };
    return 0;
};
var isSample = function (v) {
    if (v instanceof AST.Sample) {
        return true;
    };
    return false;
};
var isN = function (v) {
    if (v instanceof AST.N) {
        return true;
    };
    return false;
};
var iToN = function (x) {
    return Data_Int.toNumber(x);
};
var multiplePatternW = function (indexAtPhrase) {
    return function (mo) {
        return function (first) {
            return function (o1) {
                return function (last$prime) {
                    var o$prime = Data_List_Lazy.concat(Data_List_Lazy.replicate(mo - 1 | 0)(o1));
                    var lenO = Data_List_Lazy.length(o1);
                    var middle = map1(function (x) {
                        return Data_Tuple.fst(x) + Data_Tuple.snd(x);
                    })(Data_List_Lazy.zip(o$prime)(map1(iToN)(Data_List_Lazy.concat(toL1(map1(function (x) {
                        return Data_List_Lazy.replicate(lenO)(x);
                    })(toL1(Data_List_Lazy.range(1)(mo - 1 | 0))))))));
                    var last = (function () {
                        var $98 = eq1(last$prime)(toL2([  ]));
                        if ($98) {
                            return toL2([  ]);
                        };
                        return map1(function (v) {
                            return v + iToN(mo);
                        })(last$prime);
                    })();
                    return map1(function (v) {
                        return v + iToN(indexAtPhrase);
                    })(Data_List_Lazy.concat(toL2([ first, middle, last ])));
                };
            };
        };
    };
};
var twoPatternW = function (indexPhrase) {
    return function (first) {
        return function (last$prime) {
            var last = (function () {
                var $99 = eq1(last$prime)(toL2([  ]));
                if ($99) {
                    return toL2([  ]);
                };
                return map1(function (v) {
                    return v + 1.0;
                })(toL1(last$prime));
            })();
            return map1(function (v) {
                return v + iToN(indexPhrase);
            })(Data_List_Lazy.concat(toL2([ first, last ])));
        };
    };
};
var getIndexSimple = function (start) {
    return function (end) {
        return function (o1) {
            var between = Data_List_Lazy.filter(function (x) {
                return x > start && end > x;
            })(o1);
            var before = Data_List_Lazy.length(Data_List_Lazy.filter(function (x) {
                return x < start;
            })(o1)) - 1 | 0;
            var $100 = before === 0;
            if ($100) {
                return Data_List_Lazy.range(0)(Data_List_Lazy.length(between) - 1 | 0);
            };
            return Data_List_Lazy.range(before)(Data_List_Lazy.length(between) - 1 | 0);
        };
    };
};
var getIndexOfMiddleList = function (middleLen) {
    return function (o1) {
        var x = toL1(Data_List_Lazy.range(0)(Data_List_Lazy.length(o1) - 1 | 0));
        return Data_List_Lazy.take(middleLen)(Data_List_Lazy.cycle(x));
    };
};
var getIndexOfLastList = function (x) {
    return function (o1) {
        if (eq1(x)(toL2([  ]))) {
            return toL2([  ]);
        };
        if (Data_Boolean.otherwise) {
            return Data_List_Lazy.range(0)(Data_List_Lazy.length(x) - 1 | 0);
        };
        throw new Error("Failed pattern match at Motor (line 228, column 1 - line 228, column 60): " + [ x.constructor.name, o1.constructor.name ]);
    };
};
var getIndexOfFirstList = function (x) {
    return function (o1) {
        if (eq1(x)(toL2([  ]))) {
            return toL2([  ]);
        };
        if (Data_Boolean.otherwise) {
            return Data_List_Lazy.range(Data_List_Lazy.length(o1) - Data_List_Lazy.length(x) | 0)(Data_List_Lazy.length(o1) - 1 | 0);
        };
        throw new Error("Failed pattern match at Motor (line 219, column 1 - line 219, column 61): " + [ x.constructor.name, o1.constructor.name ]);
    };
};
var getEventIndex = function (p$prime) {
    return function (len$prime) {
        return function (e$prime) {
            var p = Data_Int.toNumber(p$prime);
            var len = Data_Int.toNumber(len$prime);
            var e = Data_Int.toNumber(e$prime);
            return Data_Int.round(p * len + e);
        };
    };
};
var fromPatternToList = function (v) {
    if (v instanceof AST.Onsets) {
        return fromFoldable(v.value0);
    };
    return fromFoldable1([ false ]);
};
var fromRhythmicToList = function (v) {
    if (v instanceof AST.Onsets) {
        return fromFoldable(v.value0);
    };
    if (v instanceof AST.Patron) {
        return Data_List_Lazy.concat(map1(fromPatternToList)(fromFoldable(v.value0)));
    };
    return fromFoldable1([ false ]);
};
var floor = function (x) {
    return Data_Int.floor(x);
};
var justFractional = function (x) {
    return x - iToN(floor(x));
};
var toRat = function (x) {
    var floored = floor(x);
    var fract = x - iToN(floored);
    var fract$prime = Data_Int.round(fract * iToN(1000000));
    return add1(reduce(floored)(1))(reduce(fract$prime)(1000000));
};
var positionToTime = function (t1) {
    return function (lenPasaje) {
        return function (v) {
            var posInTempo = mul1(toRat(v.value0))(lenPasaje);
            var countInTime = Data_Tempo.countToTime(t1)(posInTempo);
            return new AST.Coord(unwrap(Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime(countInTime))) / 1000.0, floor(v.value0), v.value1);
        };
    };
};
var filterEvents = function (nPassages) {
    return function (start) {
        return function (end) {
            return function (passageAtStart) {
                return function (o1) {
                    if (nPassages === 0) {
                        var x = map1(function (v) {
                            return v + iToN(floor(passageAtStart));
                        })(Data_List_Lazy.filter(function (x1) {
                            return x1 >= start && x1 < end;
                        })(o1));
                        return Data_List_Lazy.zip(x)(getIndexSimple(start)(end)(o1));
                    };
                    if (nPassages === 1) {
                        var lastList = Data_List_Lazy.filter(function (x) {
                            return x >= 0.0 && x < end;
                        })(o1);
                        var indexLast = getIndexOfLastList(lastList)(o1);
                        var firstList = Data_List_Lazy.filter(function (x) {
                            return x >= start && x < 1.0;
                        })(o1);
                        var indexFst = getIndexOfFirstList(firstList)(o1);
                        var listOfIndexes = Data_List_Lazy.concat(toL2([ indexFst, indexLast ]));
                        var listOfEvents = twoPatternW(floor(passageAtStart))(firstList)(lastList);
                        return Data_List_Lazy.zip(listOfEvents)(listOfIndexes);
                    };
                    if (Data_Boolean.otherwise) {
                        var middleList = Data_List_Lazy.take(floor(iToN(Data_List_Lazy.length(o1)) * (iToN(nPassages) - 1.0)))(Data_List_Lazy.cycle(o1));
                        var middleIndex = getIndexOfMiddleList(Data_List_Lazy.length(middleList))(o1);
                        var lastList = Data_List_Lazy.filter(function (x) {
                            return x >= 0.0 && x < end;
                        })(o1);
                        var lastIndex = getIndexOfLastList(lastList)(o1);
                        var firstList = Data_List_Lazy.filter(function (x) {
                            return x >= start && x < 1.0;
                        })(o1);
                        var fstIndex = getIndexOfFirstList(firstList)(o1);
                        var listOfIndexes = Data_List_Lazy.concat(toL2([ fstIndex, middleIndex, lastIndex ]));
                        var listOfEvents = multiplePatternW(floor(passageAtStart))(nPassages)(firstList)(o1)(lastList);
                        return Data_List_Lazy.zip(listOfEvents)(listOfIndexes);
                    };
                    throw new Error("Failed pattern match at Motor (line 190, column 1 - line 190, column 92): " + [ nPassages.constructor.name, start.constructor.name, end.constructor.name, passageAtStart.constructor.name, o1.constructor.name ]);
                };
            };
        };
    };
};
var evalToCountNumber = function (t1) {
    return function (eval1) {
        return function (tp) {
            var x = unwrap(diff(tp)(eval1));
            return (x * Data_Rational.toNumber(t1.freq)) / 1000.0;
        };
    };
};
var evalToCountWrapper = function (v) {
    return function (v1) {
        return function (v2) {
            return function (tp) {
                if (v instanceof AST.Origin) {
                    return Data_Tempo.timeToCountNumber(v1)(tp);
                };
                if (v instanceof AST.Eval) {
                    return evalToCountNumber(v1)(v2)(tp);
                };
                if (v instanceof AST.Prospective) {
                    return Data_Tempo.timeToCountNumber(t)(tp);
                };
                throw new Error("Failed pattern match at Motor (line 170, column 1 - line 170, column 69): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, tp.constructor.name ]);
            };
        };
    };
};
var passagePosition = function (o1) {
    return function (lenPasaje) {
        return function (t1) {
            return function (ws1) {
                return function (we1) {
                    return function (eval1) {
                        return function (nose) {
                            var countAtStart = evalToCountWrapper(nose)(t1)(eval1)(ws1);
                            var passageAtStart = countAtStart / Data_Rational.toNumber(lenPasaje);
                            var percentAtStart = passageAtStart - iToN(floor(passageAtStart));
                            var countAtEnd = evalToCountWrapper(nose)(t1)(eval1)(we1);
                            var passageAtEnd = countAtEnd / Data_Rational.toNumber(lenPasaje);
                            var nPassages = floor(passageAtEnd) - floor(passageAtStart) | 0;
                            var percentAtEnd = passageAtEnd - iToN(floor(passageAtEnd));
                            var filtrado = filterEvents(nPassages)(percentAtStart)(percentAtEnd)(passageAtStart)(o1);
                            var posToTime = map1(function (x) {
                                return positionToTime(t1)(lenPasaje)(x);
                            })(filtrado);
                            return fromFoldableWithIndex(posToTime);
                        };
                    };
                };
            };
        };
    };
};
var fromPassageToCoord = function (rhy) {
    return function (t1) {
        return function (ws1) {
            return function (we1) {
                return function (eval1) {
                    return function (nose) {
                        var x = fromRhythmicToList(rhy);
                        var passageLength = Data_Rational.fromInt(Data_List_Lazy.length(x));
                        var onsets = map1(function ($169) {
                            return Data_Rational.fromInt(Data_Tuple.snd($169));
                        })(Data_List_Lazy.filter(function (x1) {
                            return Data_Tuple.fst(x1) === true;
                        })(Data_List_Lazy.zip(x)(Data_List_Lazy.range(0)(Data_List_Lazy.length(x)))));
                        var oPercen = map1(function ($170) {
                            return Data_Rational.toNumber((function (v) {
                                return div1(v)(passageLength);
                            })($170));
                        })(onsets);
                        return passagePosition(oPercen)(passageLength)(t1)(ws1)(we1)(eval1)(nose);
                    };
                };
            };
        };
    };
};
var $$eval = /* #__PURE__ */ (function () {
    return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(0)(0));
})();
var countToStart = 327;
var auralIndex = function (v) {
    if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.Sample) {
        return v.value0.value1;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof AST.N) {
        return v.value0.value1;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return AST.EventI.value;
    };
    throw new Error("Failed pattern match at Motor (line 96, column 1 - line 96, column 34): " + [ v.constructor.name ]);
};
var attachPosixWithSample = function (x) {
    return function (v) {
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(x, v.value0.value0));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Motor (line 127, column 1 - line 127, column 90): " + [ x.constructor.name, v.constructor.name ]);
    };
};
var eventForSample = function (v) {
    return function (len) {
        return function (samples) {
            return function (v1) {
                if (v instanceof AST.EventI) {
                    return attachPosixWithSample(v1.value0)(Data_List_Lazy.head(Data_List_Lazy.filter(function (s) {
                        return mod(getEventIndex(v1.value1)(len)(v1.value2))(Data_List_Lazy.length(samples)) === Data_Tuple.snd(s);
                    })(samples)));
                };
                if (v instanceof AST.PassageI) {
                    return attachPosixWithSample(v1.value0)(Data_List_Lazy.head(Data_List_Lazy.filter(function (s) {
                        return mod(v1.value1)(len) === Data_Tuple.snd(s);
                    })(samples)));
                };
                if (v instanceof AST.MetreI) {
                    return attachPosixWithSample(v1.value0)(Data_List_Lazy.head(fromFoldable1([  ])));
                };
                throw new Error("Failed pattern match at Motor (line 122, column 1 - line 122, column 102): " + [ v.constructor.name, len.constructor.name, samples.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var samplesWithPosix = function (index) {
    return function (len) {
        return function (samples) {
            return function (coords) {
                return map1(eventForSample(index)(len)(samples))(coords);
            };
        };
    };
};
var arrangeAurals = function (aus) {
    var samples = Data_List_Lazy.last(Data_List_Lazy.filter(isSample)(fromFoldable2(aus)));
    var n = Data_List_Lazy.last(Data_List_Lazy.filter(isN)(fromFoldable2(aus)));
    return {
        s: samples,
        n: n
    };
};
var passageToEvents = function (v) {
    return function (t1) {
        return function (ws1) {
            return function (we1) {
                return function (eval1) {
                    var coords = fromPassageToCoord(v.value0)(t1)(ws1)(we1)(eval1)(v.value2);
                    var lCoord$prime = map1(Data_Tuple.snd)(toUnfoldable(coords));
                    var lCoord = nonRepeat(v.value3)(lCoord$prime);
                    var aurals = arrangeAurals(fromFoldable(v.value1));
                    var s = samplesWithPosix(auralIndex(aurals.s))(lenRhyth(v.value0))(sampleWithIndex(aurals.s))(lCoord);
                    return map1(toEvent)(s);
                };
            };
        };
    };
};
var passageToEvents$prime = function (v) {
    return function (t1) {
        return function (ws1) {
            return function (we1) {
                return function (eval1) {
                    var coords = fromPassageToCoord(v.value0)(t1)(ws1)(we1)(eval1)(v.value2);
                    var lCoord$prime = map1(Data_Tuple.snd)(toUnfoldable(coords));
                    var lCoord = nonRepeat(v.value3)(lCoord$prime);
                    var aurals = arrangeAurals(fromFoldable(v.value1));
                    var s = samplesWithPosix(auralIndex(aurals.s))(lenRhyth(v.value0))(sampleWithIndex(aurals.s))(lCoord);
                    return s;
                };
            };
        };
    };
};
var test = /* #__PURE__ */ (function () {
    return passageToEvents$prime(new AST.Passage(new AST.Onsets(fromFoldable3([ true, true, true, true, true ])), fromFoldable3([ new AST.Sample(fromFoldable3([ "bd", "cp", "808" ]), AST.EventI.value) ]), AST.Eval.value, true))(t)(ws(0)(0))(we(2)(0))($$eval);
})();
export {
    passageToEvents,
    test,
    getEventIndex
};
