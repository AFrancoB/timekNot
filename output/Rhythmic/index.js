// Generated by purs version 0.15.2
import * as AST from "../AST/index.js";
import * as Aural from "../Aural/index.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Date from "../Data.Date/index.js";
import * as Data_Date_Component from "../Data.Date.Component/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Lazy from "../Data.List.Lazy/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Time from "../Data.Time/index.js";
import * as Data_Time_Component from "../Data.Time.Component/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_Language from "../Parsing.Language/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as Parsing_Token from "../Parsing.Token/index.js";
var tokenParser = /* #__PURE__ */ Parsing_Token.makeTokenParser(Parsing_Language.haskellStyle);
var whitespace = /* #__PURE__ */ (function () {
    return tokenParser.whiteSpace;
})();
var stringLit = /* #__PURE__ */ (function () {
    return tokenParser.stringLiteral;
})();
var semi = /* #__PURE__ */ (function () {
    return tokenParser.semi;
})();
var reserved = /* #__PURE__ */ (function () {
    return tokenParser.reserved;
})();
var parens = /* #__PURE__ */ (function () {
    return tokenParser.parens;
})();
var onset = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT)(/* #__PURE__ */ Parsing_Combinators.choice(Data_Foldable.foldableArray)([ /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT)(/* #__PURE__ */ Parsing_String_Basic.oneOf([ "x" ]))(/* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT)(true)), /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT)(/* #__PURE__ */ Parsing_String_Basic.oneOf([ "o" ]))(/* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT)(false)) ]))(function (x) {
    return Control_Bind.bind(Parsing.bindParserT)(Control_Applicative.pure(Parsing.applicativeParserT)(1))(function () {
        return Control_Applicative.pure(Parsing.applicativeParserT)(x);
    });
});
var onsets = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT)(/* #__PURE__ */ Parsing_Combinators.many(onset))(function (xs) {
    return Control_Bind.bind(Parsing.bindParserT)(Control_Applicative.pure(Parsing.applicativeParserT)(1))(function () {
        return Control_Applicative.pure(Parsing.applicativeParserT)(new AST.Onsets(Data_List.fromFoldable(Data_List_Types.foldableList)(xs)));
    });
});
var topRhythmic = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT)(/* #__PURE__ */ Parsing_Combinators.choice(Data_Foldable.foldableArray)([ onsets ]))(function (r) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT)(whitespace)(function () {
        return Control_Bind.bind(Parsing.bindParserT)(Parsing_String.string(":||"))(function () {
            return Control_Bind.bind(Parsing.bindParserT)(Control_Applicative.pure(Parsing.applicativeParserT)(1))(function () {
                return Control_Applicative.pure(Parsing.applicativeParserT)(r);
            });
        });
    });
});
var oDur = /* #__PURE__ */ Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
var o = /* #__PURE__ */ Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([ 0.0, 0.2, 0.5 ]);
var naturalOrFloat = /* #__PURE__ */ (function () {
    return tokenParser.naturalOrFloat;
})();
var makeTime = function (h) {
    return function (min) {
        return function (sec) {
            return function (milisec) {
                return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(h)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(min)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(sec)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(milisec)));
            };
        };
    };
};
var makeDate = function (y) {
    return function (m) {
        return function (d) {
            return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.flap(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.canonicalDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(y)))(m))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(d)));
        };
    };
};
var t = /* #__PURE__ */ (function () {
    return {
        freq: Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(2)(1),
        time: new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25)(100)),
        count: Data_Rational.fromInt(0)
    };
})();
var we = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var ws = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var integer = /* #__PURE__ */ (function () {
    return tokenParser.integer;
})();
var identifier = /* #__PURE__ */ (function () {
    return tokenParser.identifier;
})();
var $$float = /* #__PURE__ */ (function () {
    return tokenParser["float"];
})();
var $$eval = /* #__PURE__ */ (function () {
    return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(14)(59)(500));
})();
var convergenceParser = /* #__PURE__ */ (function () {
    return Control_Bind.bind(Parsing.bindParserT)(Control_Alt.alt(Parsing.altParserT)(Parsing_Combinators.choice(Data_Foldable.foldableArray)([ Control_Apply.applySecond(Parsing.applyParserT)(Parsing_String.string("eval"))(Control_Applicative.pure(Parsing.applicativeParserT)(AST.Eval.value)), Control_Apply.applySecond(Parsing.applyParserT)(Parsing_String.string("origin"))(Control_Applicative.pure(Parsing.applicativeParserT)(AST.Origin.value)) ]))(Control_Applicative.pure(Parsing.applicativeParserT)(AST.Origin.value)))(function (x) {
        return Control_Applicative.pure(Parsing.applicativeParserT)(x);
    });
})();
var topPassageParser = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT)(topRhythmic)(function (rhy) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT)(whitespace)(function () {
        return Control_Bind.bind(Parsing.bindParserT)(Aural.samples)(function (aur) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT)(whitespace)(function () {
                return Control_Bind.bind(Parsing.bindParserT)(convergenceParser)(function (conv) {
                    return Control_Bind.bind(Parsing.bindParserT)(Control_Applicative.pure(Parsing.applicativeParserT)(1))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT)(Parsing_String.eof)(function () {
                            return Control_Applicative.pure(Parsing.applicativeParserT)(new AST.Passage(rhy, Data_List.fromFoldable(Data_Foldable.foldableArray)([ aur ]), AST.Origin.value));
                        });
                    });
                });
            });
        });
    });
});
var comma = /* #__PURE__ */ (function () {
    return tokenParser.comma;
})();
var colon = /* #__PURE__ */ (function () {
    return tokenParser.colon;
})();
var brackets = /* #__PURE__ */ (function () {
    return tokenParser.brackets;
})();
var braces = /* #__PURE__ */ (function () {
    return tokenParser.braces;
})();
export {
    topPassageParser
};
