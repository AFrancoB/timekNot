// Generated by purs version 0.15.4
import * as AST from "../AST/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Date from "../Data.Date/index.js";
import * as Data_Date_Component from "../Data.Date.Component/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Lazy from "../Data.List.Lazy/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Time from "../Data.Time/index.js";
import * as Data_Time_Component from "../Data.Time.Component/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Rhythmic from "../Rhythmic/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
var reduce = /* #__PURE__ */ Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt);
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var toEnum = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumHour);
var toEnum1 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute);
var toEnum2 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond);
var toEnum3 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond);
var flap = /* #__PURE__ */ Data_Functor.flap(Data_Maybe.functorMaybe);
var toEnum4 = /* #__PURE__ */ Data_Enum.toEnum(Data_Date_Component.boundedEnumYear);
var toEnum5 = /* #__PURE__ */ Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Either.eqEither(Parsing.eqParseError)(AST.passageEqInstance));
var fromFoldable = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var oDur = /* #__PURE__ */ reduce(1)(2);
var o = /* #__PURE__ */ Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)([ 0.0, 0.2, 0.5 ]);
var makeTime = function (h) {
    return function (min) {
        return function (sec) {
            return function (milisec) {
                return fromJust(apply(apply(apply(map(Data_Time.Time.create)(toEnum(h)))(toEnum1(min)))(toEnum2(sec)))(toEnum3(milisec)));
            };
        };
    };
};
var makeDate = function (y) {
    return function (m) {
        return function (d) {
            return fromJust(apply(flap(map(Data_Date.canonicalDate)(toEnum4(y)))(m))(toEnum5(d)));
        };
    };
};
var t = /* #__PURE__ */ (function () {
    return {
        freq: reduce(2)(1),
        time: new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25)(100)),
        count: Data_Rational.fromInt(0)
    };
})();
var we = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var ws = function (x) {
    return function (y) {
        return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(15)(x)(y));
    };
};
var main = function __do() {
    Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Test_QuickCheck.quickCheck(Test_QuickCheck.testableResult))([ Test_QuickCheck.withHelp(eq(Parsing.runParser("xxxxx :|| sampleSeq \"bd cp 808\"")(Rhythmic.topPassageParser))(new Data_Either.Right(new AST.Passage(new AST.Onsets(fromFoldable([ true, true, true, true, true ])), fromFoldable([ new AST.Sample(fromFoldable([ "bd", "cp", "808" ]), AST.EventI.value) ]), AST.Origin.value, true))))("rhythmic and sampleSeq (the event per sample parser) do not parse properly"), Test_QuickCheck.withHelp(eq(Parsing.runParser("xxxxx :|| sampleSeq' \"bd cp 808\"")(Rhythmic.topPassageParser))(new Data_Either.Right(new AST.Passage(new AST.Onsets(fromFoldable([ true, true, true, true, true ])), fromFoldable([ new AST.Sample(fromFoldable([ "bd", "cp", "808" ]), AST.PassageI.value) ]), AST.Origin.value, true))))("rhythmic and sampleSeq' (the passage per sample parser) do not parse properly") ])();
    return Data_Unit.unit;
};
var extractSample = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return v.value0.s;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return "nada";
    };
    throw new Error("Failed pattern match at Test.Main (line 43, column 1 - line 43, column 38): " + [ v.constructor.name ]);
};
var extractPosix = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return show(v.value0.whenPosix);
    };
    if (v instanceof Data_Maybe.Nothing) {
        return "nada";
    };
    throw new Error("Failed pattern match at Test.Main (line 39, column 1 - line 39, column 37): " + [ v.constructor.name ]);
};
var extractPassageCoord = function (v) {
    return v.value1;
};
var extractEventCoord = function (v) {
    return v.value2;
};
var $$eval = /* #__PURE__ */ (function () {
    return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(14)(59)(500));
})();
var countToStart = 327;
export {
    main,
    extractPosix,
    extractSample,
    extractEventCoord,
    extractPassageCoord,
    makeDate,
    makeTime,
    t,
    ws,
    we,
    $$eval as eval,
    oDur,
    o,
    countToStart
};
