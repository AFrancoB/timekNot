// Generated by purs version 0.15.4
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Date from "../Data.Date/index.js";
import * as Data_Date_Component from "../Data.Date.Component/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Data_Time from "../Data.Time/index.js";
import * as Data_Time_Component from "../Data.Time.Component/index.js";
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var toEnum = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumHour);
var toEnum1 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute);
var toEnum2 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond);
var toEnum3 = /* #__PURE__ */ Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond);
var flap = /* #__PURE__ */ Data_Functor.flap(Data_Maybe.functorMaybe);
var toEnum4 = /* #__PURE__ */ Data_Enum.toEnum(Data_Date_Component.boundedEnumYear);
var toEnum5 = /* #__PURE__ */ Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var makeTime = function (h) {
    return function (min) {
        return function (sec) {
            return function (milisec) {
                return fromJust(apply(apply(apply(map(Data_Time.Time.create)(toEnum(h)))(toEnum1(min)))(toEnum2(sec)))(toEnum3(milisec)));
            };
        };
    };
};
var makeDate = function (y) {
    return function (m) {
        return function (d) {
            return fromJust(apply(flap(map(Data_Date.canonicalDate)(toEnum4(y)))(m))(toEnum5(d)));
        };
    };
};
var t = /* #__PURE__ */ (function () {
    return {
        freq: Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(2)(1),
        time: new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25)(100)),
        count: Data_Rational.fromInt(0)
    };
})();
var o = /* #__PURE__ */ Data_Tempo.origin(t);
var wP = function (sm) {
    var secs = Data_Int.floor(sm);
    var mili = Data_Int.round((sm - Data_Int.toNumber(Data_Int.floor(sm))) * 1000.0);
    return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(11)(25 + secs | 0)(100 + mili | 0));
};
var fromDateTimeToPosixMaybe = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just(unwrap(Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime(v.value0))) / 1000.0);
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Test.Main (line 111, column 1 - line 111, column 58): " + [ v.constructor.name ]);
};
var fromDateTimeToPosix = function (x) {
    return unwrap(Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime(x))) / 1000.0;
};
var oPosix = /* #__PURE__ */ fromDateTimeToPosix(o);
var freqToDur = function (freq) {
    return 1.0 / freq;
};
var $$eval = /* #__PURE__ */ (function () {
    return new Data_DateTime.DateTime(makeDate(2022)(Data_Date_Component.June.value)(3), makeTime(19)(14)(59)(500));
})();
var bpmToFreq = function (bpm) {
    return (1.0 / 60.0) * bpm;
};
var bpmToDur = function (bpm) {
    return 1.0 / bpmToFreq(bpm);
};
var durInSecs = function (dur) {
    return function (tempo) {
        return dur * bpmToDur(tempo);
    };
};
var voice = /* #__PURE__ */ durInSecs(6.0)(120.0);
var voiceFromOrigin = function (units) {
    return function (tempo) {
        return function (sm) {
            return (fromDateTimeToPosix(wP(sm)) - oPosix) / durInSecs(units)(tempo);
        };
    };
};
export {
    makeDate,
    makeTime,
    voice,
    t,
    wP,
    $$eval as eval,
    o,
    oPosix,
    voiceFromOrigin,
    fromDateTimeToPosix,
    fromDateTimeToPosixMaybe,
    durInSecs,
    bpmToFreq,
    freqToDur,
    bpmToDur
};
