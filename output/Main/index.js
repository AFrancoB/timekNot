// Generated by purs version 0.15.4
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Foreign from "../Foreign/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Unleash from "../Unleash/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect.bindEffect);
var reduce = /* #__PURE__ */ Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt);
var show = /* #__PURE__ */ Data_Show.show(Unleash.showProgram);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var show2 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "n";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "s";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "whenPosix";
    }
})(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(Data_Show.showString))(Data_Show.showInt))));
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var unsafeMaybeMilliseconds = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_Maybe.Just) {
            $tco_done = true;
            return v.value0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            $copy_v = Data_DateTime_Instant.instant(0.0);
            return;
        };
        throw new Error("Failed pattern match at Main (line 82, column 1 - line 82, column 51): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var setTempo = function (unleash) {
    return function (t) {
        return Effect_Ref.write(Data_Tempo.fromForeignTempo(t))(unleash.tempo);
    };
};
var pErrorToString = function (v) {
    if (v instanceof Data_Either.Left) {
        return new Data_Either.Left(Parsing.parseErrorMessage(v.value0));
    };
    if (v instanceof Data_Either.Right) {
        return new Data_Either.Right(v.value0);
    };
    throw new Error("Failed pattern match at Main (line 64, column 1 - line 64, column 68): " + [ v.constructor.name ]);
};
var numToDateTime = function (x) {
    var asMaybeInstant = Data_DateTime_Instant.instant(x);
    var asInstant = unsafeMaybeMilliseconds(asMaybeInstant);
    return Data_DateTime_Instant.toDateTime(asInstant);
};
var launch = function __do() {
    Effect_Console.log("timekNot-CU: launch")();
    var ast = Effect_Ref["new"](new Unleash.P(new Data_Tuple.Tuple("", 0), new Unleash.Q(0.0, 0.0)))();
    var tempo = bind(Data_Tempo.newTempo(reduce(1)(1)))(Effect_Ref["new"])();
    var $$eval = bind(Effect_Now.nowDateTime)(Effect_Ref["new"])();
    return {
        ast: ast,
        tempo: tempo,
        "eval": $$eval
    };
};
var fromProgramToArray = function (prog) {
    return function (t) {
        return function (ws) {
            return function (we) {
                return function ($$eval) {
                    return [ Unleash.actualise(prog)(t)($$eval)(ws)(we) ];
                };
            };
        };
    };
};
var unleashToForeigns = function (un) {
    return function (ws) {
        return function (we) {
            var ws$prime = numToDateTime(ws * 1000.0);
            var we$prime = numToDateTime(we * 1000.0);
            return function __do() {
                var program = Effect_Ref.read(un.ast)();
                var t = Effect_Ref.read(un.tempo)();
                var $$eval = Effect_Ref.read(un["eval"])();
                Effect_Console.log(show(program))();
                Effect_Console.log(show1(ws))();
                Effect_Console.log(show1(we))();
                var events = fromProgramToArray(program)(t)(ws$prime)(we$prime)($$eval);
                Effect_Console.log(show2(events))();
                return map(Foreign.unsafeToForeign)(events);
            };
        };
    };
};
var scheduleNoteEvents = function (tk) {
    return function (ws) {
        return function (we) {
            return unleashToForeigns(tk)(ws)(we);
        };
    };
};
var evaluate = function (unleash) {
    return function (str) {
        return function __do() {
            Effect_Console.log("Unleash-Windsor: evaluate")();
            var program = Effect_Ref.read(unleash.ast)();
            var $$eval = Effect_Now.nowDateTime();
            var pr = pErrorToString(Parsing.runParser(str)(Unleash.parseSample));
            if (pr instanceof Data_Either.Left) {
                return {
                    success: false,
                    error: pr.value0
                };
            };
            if (pr instanceof Data_Either.Right) {
                Effect_Ref.write($$eval)(unleash["eval"])();
                Effect_Ref.write(pr.value0)(unleash.ast)();
                return {
                    success: true,
                    error: ""
                };
            };
            throw new Error("Failed pattern match at Main (line 57, column 3 - line 62, column 42): " + [ pr.constructor.name ]);
        };
    };
};
export {
    launch,
    evaluate,
    pErrorToString,
    setTempo,
    scheduleNoteEvents,
    numToDateTime,
    unsafeMaybeMilliseconds,
    unleashToForeigns,
    fromProgramToArray
};
