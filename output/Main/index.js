// Generated by purs version 0.15.15
import * as AST from "../AST/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Novus from "../Novus/index.js";
import * as Parser from "../Parser/index.js";
import * as Parsing from "../Parsing/index.js";
import * as TimePacketOps from "../TimePacketOps/index.js";
import * as Voices from "../Voices/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect.bindEffect);
var fromFoldable = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var toRational = /* #__PURE__ */ Data_Rational.toRational(Data_Rational.toRationalInt);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Map_Internal.showMap(Data_Show.showString)(Data_DateTime.showDateTime));
var setTempo = function (tk) {
    return function (t) {
        return Effect_Ref.write(Data_Tempo.fromForeignTempo(t))(tk.tempo);
    };
};
var scheduleNoteEvents = function (tk) {
    return function (ws$prime) {
        return function (we$prime) {
            var ws = TimePacketOps.numToDateTime(ws$prime * 1000.0);
            var we = TimePacketOps.numToDateTime(we$prime * 1000.0);
            return function __do() {
                var program = Effect_Ref.read(tk.ast)();
                var vantageMap = Effect_Ref.read(tk.vantageMap)();
                var t = Effect_Ref.read(tk.tempo)();
                var $$eval = Effect_Ref.read(tk["eval"])();
                var tp = TimePacketOps.assambleTimePacket(ws)(we)($$eval)(t)(vantageMap);
                return Voices.programToForeign(program)(tp)();
            };
        };
    };
};
var launch = function __do() {
    Effect_Console.log("timekNot: launch")();
    var ast = Effect_Ref["new"](fromFoldable([ new AST.TimeExpression(Data_Map_Internal.empty) ]))();
    var tempo = bind(Data_Tempo.newTempo(toRational(1)(1)))(Effect_Ref["new"])();
    var $$eval = bind(Effect_Now.nowDateTime)(Effect_Ref["new"])();
    var vantageMap = Effect_Ref["new"](Data_Map_Internal.empty)();
    return {
        ast: ast,
        tempo: tempo,
        "eval": $$eval,
        vantageMap: vantageMap
    };
};
var check$prime = function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Left(Parsing.parseErrorMessage(v1.value0));
        };
        if (v1 instanceof Data_Either.Right) {
            var v2 = Parser.check(v)(v1.value0);
            if (v2) {
                return new Data_Either.Right(v1.value0);
            };
            if (!v2) {
                return new Data_Either.Left("failed the check, time bites it's own tail");
            };
            throw new Error("Failed pattern match at Main (line 84, column 30 - line 86, column 89): " + [ v2.constructor.name ]);
        };
        throw new Error("Failed pattern match at Main (line 82, column 1 - line 82, column 74): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var evaluate = function (tk) {
    return function (str) {
        return function __do() {
            Effect_Console.log("timekNot: evaluate")();
            var currentVM = Effect_Ref.read(tk.vantageMap)();
            Effect_Console.log("currentVM" + show(currentVM))();
            var tempo = Effect_Ref.read(tk.tempo)();
            var $$eval = Effect_Now.nowDateTime();
            var pr = check$prime(currentVM)(Parsing.runParser(str)(Parser.parseProgram));
            if (pr instanceof Data_Either.Left) {
                return {
                    success: false,
                    error: pr.value0
                };
            };
            if (pr instanceof Data_Either.Right) {
                Effect_Ref.write($$eval)(tk["eval"])();
                Effect_Ref.write(pr.value0)(tk.ast)();
                Effect_Ref.write(Novus.processVantage(Parser.getVantageMap(pr.value0))(currentVM)($$eval)(tempo))(tk.vantageMap)();
                return {
                    success: true,
                    error: "bad syntax"
                };
            };
            throw new Error("Failed pattern match at Main (line 74, column 3 - line 80, column 52): " + [ pr.constructor.name ]);
        };
    };
};
export {
    launch,
    evaluate,
    check$prime,
    scheduleNoteEvents,
    setTempo
};
