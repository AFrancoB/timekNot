// Generated by purs version 0.15.10
import * as AST from "../AST/index.js";
import * as Calculations from "../Calculations/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Rational from "../Data.Rational/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Foreign from "../Foreign/index.js";
import * as Parser from "../Parser/index.js";
import * as Parsing from "../Parsing/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect.bindEffect);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "begin";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "end";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "gain";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "n";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "note";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "pan";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "s";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "speed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "whenPosix";
    }
})(Data_Show.showNumber))(Data_Show.showNumber))(Data_Show.showString))(Data_Show.showNumber))(Data_Show.showNumber))(Data_Show.showInt))(Data_Show.showNumber))(Data_Show.showNumber))(Data_Show.showNumber))));
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var fromFoldable = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var toRational = /* #__PURE__ */ Data_Rational.toRational(Data_Rational.toRationalInt);
var unsafeMaybeMilliseconds = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_Maybe.Just) {
            $tco_done = true;
            return v.value0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            $copy_v = Data_DateTime_Instant.instant(0.0);
            return;
        };
        throw new Error("Failed pattern match at Main (line 95, column 1 - line 95, column 51): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var setTempo = function (tk) {
    return function (t) {
        return Effect_Ref.write(Data_Tempo.fromForeignTempo(t))(tk.tempo);
    };
};
var numToDateTime = function (x) {
    var asMaybeInstant = Data_DateTime_Instant.instant(x);
    var asInstant = unsafeMaybeMilliseconds(asMaybeInstant);
    return Data_DateTime_Instant.toDateTime(asInstant);
};
var timekNotToForeigns = function (tk) {
    return function (ws) {
        return function (we) {
            var ws$prime = numToDateTime(ws * 1000.0);
            var we$prime = numToDateTime(we * 1000.0);
            return function __do() {
                var program = Effect_Ref.read(tk.ast)();
                var anchors = Effect_Ref.read(tk.anchors)();
                var t = Effect_Ref.read(tk.tempo)();
                var $$eval = Effect_Ref.read(tk["eval"])();
                var events = Calculations.programToWaste(program)(anchors)(ws$prime)(we$prime)($$eval)(t)();
                Effect_Console.log(show(events))();
                return map(Foreign.unsafeToForeign)(events);
            };
        };
    };
};
var scheduleNoteEvents = function (tk) {
    return function (ws) {
        return function (we) {
            return timekNotToForeigns(tk)(ws)(we);
        };
    };
};
var launch = function __do() {
    Effect_Console.log("timekNot: launch")();
    var ast = Effect_Ref["new"](fromFoldable([ new AST.TimeExpression(Data_Map_Internal.empty) ]))();
    var tempo = bind(Data_Tempo.newTempo(toRational(1)(1)))(Effect_Ref["new"])();
    var $$eval = bind(Effect_Now.nowDateTime)(Effect_Ref["new"])();
    var anchors = Effect_Ref["new"](Data_Map_Internal.empty)();
    return {
        ast: ast,
        tempo: tempo,
        "eval": $$eval,
        anchors: anchors
    };
};
var check$prime = function (v) {
    if (v instanceof Data_Either.Left) {
        return new Data_Either.Left(Parsing.parseErrorMessage(v.value0));
    };
    if (v instanceof Data_Either.Right) {
        var v1 = Parser.check(v.value0);
        if (v1) {
            return new Data_Either.Right(v.value0);
        };
        if (!v1) {
            return new Data_Either.Left("failed the check, time bites it's own tail");
        };
        throw new Error("Failed pattern match at Main (line 70, column 27 - line 72, column 89): " + [ v1.constructor.name ]);
    };
    throw new Error("Failed pattern match at Main (line 68, column 1 - line 68, column 60): " + [ v.constructor.name ]);
};
var evaluate = function (tk) {
    return function (str) {
        return function __do() {
            Effect_Console.log("timekNot: evaluate")();
            var program = Effect_Ref.read(tk.ast)();
            var $$eval = Effect_Now.nowDateTime();
            var pr = check$prime(Parsing.runParser(str)(Parser.parseProgram));
            if (pr instanceof Data_Either.Left) {
                return {
                    success: false,
                    error: pr.value0
                };
            };
            if (pr instanceof Data_Either.Right) {
                Effect_Ref.write($$eval)(tk["eval"])();
                Effect_Ref.write(pr.value0)(tk.ast)();
                return {
                    success: true,
                    error: "bad syntax"
                };
            };
            throw new Error("Failed pattern match at Main (line 61, column 3 - line 66, column 52): " + [ pr.constructor.name ]);
        };
    };
};
export {
    launch,
    evaluate,
    check$prime,
    setTempo,
    scheduleNoteEvents,
    numToDateTime,
    unsafeMaybeMilliseconds,
    timekNotToForeigns
};
