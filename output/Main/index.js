// Generated by purs version 0.15.4
import * as AST from "../AST/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tempo from "../Data.Tempo/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Foreign from "../Foreign/index.js";
import * as Motor from "../Motor/index.js";
import * as Parser from "../Parser/index.js";
import * as Parsing from "../Parsing/index.js";
import * as WebDirt from "../WebDirt/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect.bindEffect);
var reduce = /* #__PURE__ */ Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt);
var toUnfoldable = /* #__PURE__ */ Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
var traverse_ = /* #__PURE__ */ Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray);
var adjust = /* #__PURE__ */ Data_DateTime.adjust(Data_Time_Duration.durationMilliseconds);
var lessThanOrEq = /* #__PURE__ */ Data_Ord.lessThanOrEq(Data_DateTime.ordDateTime);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var show1 = /* #__PURE__ */ Data_Show.show(AST.showProgram);
var show2 = /* #__PURE__ */ Data_Show.show(Data_DateTime.showDateTime);
var show3 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "s";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "whenPosix";
    }
})(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(Data_Show.showString))));
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_List_Types.functorList);
var withoutMaybe = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return {
            whenPosix: 0.0,
            s: ""
        };
    };
    throw new Error("Failed pattern match at Main (line 157, column 1 - line 157, column 36): " + [ v.constructor.name ]);
};
var unsafeMaybeMilliseconds = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_Maybe.Just) {
            $tco_done = true;
            return v.value0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            $copy_v = Data_DateTime_Instant.instant(0.0);
            return;
        };
        throw new Error("Failed pattern match at Main (line 129, column 1 - line 129, column 51): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var testMaybeInstant = function (x) {
    return Data_DateTime_Instant.instant(x);
};
var setTempo = function (timekNot) {
    return function (t) {
        return Effect_Ref.write(Data_Tempo.fromForeignTempo(t))(timekNot.tempo);
    };
};
var passageToWaste = function (p) {
    return function (t) {
        return function (ws) {
            return function (we) {
                return function ($$eval) {
                    return Motor.programToWaste(t)(ws)(we)($$eval)(p);
                };
            };
        };
    };
};
var pErrorToString = function (v) {
    if (v instanceof Data_Either.Left) {
        return new Data_Either.Left(Parsing.parseErrorMessage(v.value0));
    };
    if (v instanceof Data_Either.Right) {
        return new Data_Either.Right(v.value0);
    };
    throw new Error("Failed pattern match at Main (line 111, column 1 - line 111, column 68): " + [ v.constructor.name ]);
};
var numToDateTime = function (x) {
    var asMaybeInstant = Data_DateTime_Instant.instant(x);
    var asInstant = unsafeMaybeMilliseconds(asMaybeInstant);
    return Data_DateTime_Instant.toDateTime(asInstant);
};
var main = /* #__PURE__ */ pure(Data_Unit.unit);
var launchDirt = function __do() {
    var dirt = WebDirt.newWebDirt({
        sampleMapUrl: "samples/sampleMap.json",
        sampleFolder: "samples"
    })();
    WebDirt.initializeWebAudio(dirt)();
    return dirt;
};
var launch = function __do() {
    Effect_Console.log("timekNot-CU: launch")();
    var launchTime = Effect_Now.nowDateTime();
    var ast = Effect_Ref["new"](new AST.Program(AST.O.value, false, new Data_List_Types.Cons(new AST.S(new Data_List_Types.Cons("", Data_List_Types.Nil.value), AST.ByEvent.value), Data_List_Types.Nil.value)))();
    var tempo = bind(Data_Tempo.newTempo(reduce(1)(1)))(Effect_Ref["new"])();
    var $$eval = Effect_Ref["new"](launchTime)();
    var wS = Effect_Ref["new"](launchTime)();
    var wE = Effect_Ref["new"](launchTime)();
    return {
        ast: ast,
        tempo: tempo,
        "eval": $$eval,
        wS: wS,
        wE: wE
    };
};
var justJust = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return true;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return false;
    };
    throw new Error("Failed pattern match at Main (line 161, column 1 - line 161, column 34): " + [ v.constructor.name ]);
};
var fromProgramToArray = function (program) {
    return function (t) {
        return function (ws) {
            return function (we) {
                return function ($$eval) {
                    return toUnfoldable(passageToWaste(program)(t)(ws)(we)($$eval));
                };
            };
        };
    };
};
var scheduleEventsStandAlone = function (tk) {
    return function __do() {
        var ast = Effect_Ref.read(tk.ast)();
        var t = Effect_Ref.read(tk.tempo)();
        var $$eval = Effect_Ref.read(tk["eval"])();
        var ws = Effect_Ref.read(tk.wS)();
        var we = Effect_Ref.read(tk.wE)();
        return fromProgramToArray(ast)(t)(ws)(we)($$eval);
    };
};
var playDirts = function (dirt) {
    return function (tk) {
        return function __do() {
            var events = scheduleEventsStandAlone(tk)();
            var x = traverse_(function (x) {
                return WebDirt.playSample(dirt)(x);
            })(events)();
            return x;
        };
    };
};
var renderStandalone = function (tk) {
    return function (dirt) {
        return function __do() {
            var now = Effect_Now.nowDateTime();
            var prevWE = Effect_Ref.read(tk.wE)();
            var future = Data_Maybe.fromMaybe(now)(adjust(100.0)(now));
            var $42 = lessThanOrEq(prevWE)(future);
            if ($42) {
                var wE = Data_Maybe.fromMaybe(now)(adjust(100.0)(prevWE));
                Effect_Ref.write(prevWE)(tk.wS)();
                Effect_Ref.write(wE)(tk.wE)();
                var t = Effect_Ref.read(tk.tempo)();
                return playDirts(dirt)(tk)();
            };
            return Effect_Console.log(show("sleep"))();
        };
    };
};
var timekNotToForeigns = function (tk) {
    return function (ws) {
        return function (we) {
            return function __do() {
                var program = Effect_Ref.read(tk.ast)();
                var t = Effect_Ref.read(tk.tempo)();
                var $$eval = Effect_Ref.read(tk["eval"])();
                Effect_Console.log(show1(program))();
                Effect_Console.log(show2(ws))();
                Effect_Console.log(show2(we))();
                var events = fromProgramToArray(program)(t)(ws)(we)($$eval);
                Effect_Console.log(show3(events))();
                return map(Foreign.unsafeToForeign)(events);
            };
        };
    };
};
var scheduleNoteEvents = function (tk) {
    return function (ws) {
        return function (we) {
            return timekNotToForeigns(tk)(ws)(we);
        };
    };
};
var filterMaybe = function (x) {
    return map1(withoutMaybe)(Data_List.filter(justJust)(x));
};
var evaluate = function (timekNot) {
    return function (str) {
        return function __do() {
            Effect_Console.log("timekNot-CU: evaluate")();
            var passage = Effect_Ref.read(timekNot.ast)();
            var $$eval = Effect_Now.nowDateTime();
            var pr = pErrorToString(Parsing.runParser(str)(Parser.parseTop));
            if (pr instanceof Data_Either.Left) {
                return {
                    success: false,
                    error: pr.value0
                };
            };
            if (pr instanceof Data_Either.Right) {
                Effect_Ref.write($$eval)(timekNot["eval"])();
                Effect_Ref.write(pr.value0)(timekNot.ast)();
                return {
                    success: true,
                    error: ""
                };
            };
            throw new Error("Failed pattern match at Main (line 104, column 3 - line 109, column 42): " + [ pr.constructor.name ]);
        };
    };
};
export {
    main,
    launchDirt,
    launch,
    renderStandalone,
    playDirts,
    scheduleEventsStandAlone,
    evaluate,
    pErrorToString,
    setTempo,
    scheduleNoteEvents,
    numToDateTime,
    unsafeMaybeMilliseconds,
    timekNotToForeigns,
    fromProgramToArray,
    passageToWaste,
    filterMaybe,
    withoutMaybe,
    justJust,
    testMaybeInstant
};
